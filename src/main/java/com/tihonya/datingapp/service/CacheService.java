package com.tihonya.datingapp.service;

import java.util.Comparator;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class CacheService {
    private static final Logger LOGGER = LoggerFactory.getLogger(CacheService.class);

    private static final int MAX_CACHE_SIZE = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    private static final long CLEANUP_INTERVAL_MS = 2 * 60 * 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ (2 –º–∏–Ω—É—Ç—ã)

    private final ConcurrentHashMap<String, CacheEntry> cache = new ConcurrentHashMap<>();

    public CacheService() {
        startCacheCleanupTask();
    }

    public void saveToCache(String key, Object value) {
        if (cache.size() >= MAX_CACHE_SIZE) {
            removeOldestEntry();
        }
        cache.put(key, new CacheEntry(value));
        LOGGER.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {}", key);
    }

    public <T> T getFromCache(String key, Class<T> type) {
        CacheEntry entry = cache.get(key);
        if (entry != null && !entry.isExpired()) {
            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞: {}", key);
            return type.cast(entry.getValue());
        }
        cache.remove(key);
        LOGGER.info("‚ùå –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –∫–ª—é—á–∞: {}", key);
        return null;
    }

    //    public <T> T getFromCache(String key) {
    //        CacheEntry entry = cache.get(key);
    //        if (entry != null && !entry.isExpired()) {
    //            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞: {}", key);
    //            return (T) entry.getValue();  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
    //        }
    //        cache.remove(key);
    //        LOGGER.info("‚ùå –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –∫–ª—é—á–∞: {}", key);
    //        return null;
    //    }

    public void clearCache(String key) {
        cache.remove(key);
        LOGGER.info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –∫–ª—é—á–∞: {}", key);
    }

    public void printCache() {
        LOGGER.info("üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:");
        cache.forEach((key, entry) -> LOGGER.info("üîπ {} -> {}", key, entry.getValue()));
    }

    private void removeOldestEntry() {
        Optional<Map.Entry<String, CacheEntry>> oldestEntry = cache.entrySet()
                .stream()
                .min(Comparator.comparing(e -> e.getValue().getTimestamp()));

        oldestEntry.ifPresent(entry -> {
            cache.remove(entry.getKey());
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫—ç—à-–∫–ª—é—á: {}", entry.getKey());
        });
    }

    private void startCacheCleanupTask() {
        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

        scheduler.scheduleAtFixedRate(() -> {
            try {
                // –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞
                cache.entrySet().removeIf(entry -> entry.getValue().isExpired());
                LOGGER.info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞");
                printCache();
            } catch (Exception e) {
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞", e);
            }
        }, CLEANUP_INTERVAL_MS, CLEANUP_INTERVAL_MS, TimeUnit.MILLISECONDS);
    }
}

    //    private void startCacheCleanupTask() {
    //        try (ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor()) {
    //            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    //            scheduler.scheduleAtFixedRate(() -> {
    //                try {
    //                    // –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞
    //                    cache.entrySet().removeIf(entry -> entry.getValue().isExpired());
    //                    LOGGER.info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞");
    //                } catch (Exception e) {
    //                    LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞", e);
    //                }
    //            }, CLEANUP_INTERVAL_MS, CLEANUP_INTERVAL_MS, TimeUnit.MILLISECONDS);
    //
    //
    //            Thread.sleep(Long.MAX_VALUE);  // –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –Ω–∞–≤—Å–µ–≥–¥–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–µ —É—Å–ª–æ–≤–∏–µ)
    //        } catch (InterruptedException e) {
    //            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", e);
    //        }
    //    }





