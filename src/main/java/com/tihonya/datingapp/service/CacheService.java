package com.tihonya.datingapp.service;

import java.util.Comparator;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class CacheService {
    private static final Logger LOGGER = LoggerFactory.getLogger(CacheService.class);

    private static final int MAX_CACHE_SIZE = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞

    private final ConcurrentHashMap<String, CacheEntry> cache = new ConcurrentHashMap<>();

    public CacheService() {
        startCacheCleanupTask();
    }

    public void saveToCache(String key, Object value) {
        if (cache.size() >= MAX_CACHE_SIZE) {
            removeOldestEntry();
        }
        cache.put(key, new CacheEntry(value));
        LOGGER.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {}", key);
    }

    public <T> T getFromCache(String key, Class<T> type) {
        CacheEntry entry = cache.get(key);
        if (entry != null && !entry.isExpired()) {
            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞: {}", key);
            return type.cast(entry.getValue());
        }
        cache.remove(key);
        LOGGER.info("‚ùå –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –∫–ª—é—á–∞: {}", key);
        return null;
    }

    public void clearMatchesCache(Long profileId) {
        String prefix = "matches_" + profileId;
        cache.keySet().removeIf(key -> key.startsWith(prefix));
        LOGGER.info("üóëÔ∏è –û—á–∏—â–µ–Ω—ã –≤—Å–µ –º—ç—Ç—á–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {}", profileId);
    }

    public void clearCache(String key) {
        cache.remove(key);
        LOGGER.info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –∫–ª—é—á–∞: {}", key);
    }

    public void printCache() {
        LOGGER.info("üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:");
        cache.forEach((key, entry) -> LOGGER.info("üîπ {} -> {}", key, entry.getValue()));
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ getSize, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    public int getSize() {
        return cache.size();
    }

    private void removeOldestEntry() {
        Optional<Map.Entry<String, CacheEntry>> oldestEntry = cache.entrySet()
                .stream()
                .min(Comparator.comparing(e -> e.getValue().getTimestamp()));

        oldestEntry.ifPresent(entry -> {
            cache.remove(entry.getKey());
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫—ç—à-–∫–ª—é—á: {}", entry.getKey());
        });
    }

    // üïí –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)
    @Scheduled(fixedRate = 30000)
    public void startCacheCleanupTask() {
        try {
            cache.entrySet().removeIf(entry -> entry.getValue().isExpired());
            LOGGER.info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞");
            printCache();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞", e);
        }
    }
}